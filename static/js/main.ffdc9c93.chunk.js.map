{"version":3,"sources":["card.js","score.js","reset.js","listcard.js","index.js"],"names":["Card","props","className","src","carte","image","alt","onClick","changeliste","nom","Score","children","Reset","e","newgame","ListCard","useState","listeDisplay","setlisteDisplay","carteSelected","setcarteselected","score","setscore","gameover","setgameover","listeCard","setlisteCard","useEffect","length","maliste","fetch","then","response","json","data","results","forEach","element","push","id","initliste","changeScore","newscore","controlChange","card","findIndex","cardId","ncartes","hasCard","alert","console","log","list","newliste","hazard","parseInt","Math","random","map","uniqid","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAgBeA,EAfF,SAACC,GACb,OACC,mCACC,sBAAKC,UAAWD,EAAMC,UAAtB,UACC,qBACCC,IAAKF,EAAMG,MAAMC,MACjBC,IAAI,QACJC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMG,QACvCF,UAAU,wDAEVD,EAAMG,MAAMK,UCRFC,EAHD,SAACT,GACd,OAAO,sBAAKC,UAAWD,EAAMC,UAAtB,qBAA0CD,EAAMU,aCWzCC,EAZD,SAACX,GACd,OACC,qBAAKC,UAAU,mBAAf,SACC,wBACCK,QAAS,SAACM,GAAD,OAAOZ,EAAMa,QAAQD,IAC9BX,UAAU,kBAFX,SAGED,EAAMU,cC8GII,EA9GE,SAACd,GAAW,IAAD,EACce,mBAAS,IADvB,mBACnBC,EADmB,KACLC,EADK,OAEgBF,mBAAS,IAFzB,mBAEnBG,EAFmB,KAEJC,EAFI,OAGAJ,mBAAS,GAHT,mBAGnBK,EAHmB,KAGZC,EAHY,OAIMN,oBAAS,GAJf,mBAInBO,EAJmB,KAITC,EAJS,OAKQR,mBAAS,IALjB,mBAKnBS,EALmB,KAKRC,EALQ,KAO1BC,qBAAU,WACR,GAAyB,IAArBF,EAAUG,OAAc,CAC1B,IAAMC,EAAU,GAChBC,MACE,uHAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAD,OAAcA,EAASE,KAAKC,WACjCJ,MAAK,SAACC,GACLA,EAASI,SAAQ,SAACC,GAEhBR,EAAQS,KAAK,CACXC,GAAIF,EAAO,GACX5B,IAAK4B,EAAO,MACZhC,MAAOgC,EAAO,UAAP,KAA+B,6BAG1CX,EAAaG,GACbW,EAAUX,SAGf,CAACJ,IAEJ,IAAMgB,EAAc,SAACC,GACnBpB,EAASoB,IAcLC,EAAgB,SAACC,IAXP,SAACA,GAEf,IAAe,IADDzB,EAAc0B,WAAU,SAACC,GAAD,OAAYA,IAAWF,EAAKL,MAChD,CAChB,IAAMQ,EAAU5B,EAChB4B,EAAQT,KAAKM,EAAKL,IAClBnB,EAAiB2B,GACjBvB,GAAY,QAEZA,GAAY,GAIdwB,CAAQJ,GACRrB,EAAW0B,MAAM,aAAezC,KAG5BA,EAAc,WAClBiC,EAAYpB,EAAQ,GACpB6B,QAAQC,IAAIhC,GACZqB,EAAUf,IAGNe,EAAY,SAACY,GAEjB,IADA,IAAMC,EAAW,GADS,aAGxB,IAAMC,EAASC,SAAyB,GAAhBC,KAAKC,WAGd,IADDJ,EAASR,WAAU,SAACD,GAAD,OAAUA,EAAKL,KAAOa,EAAKE,GAAQf,OAElEc,EAASf,KAAKc,EAAKE,KALI,IAApBD,EAASzB,QAAe,IAQ/BV,EAAgBmC,IAalB,OACE,mCACE,qBAAKnD,UAAU,kBAAf,SACE,sBAAKA,UAAU,8BAAf,UACE,cAAC,EAAD,CAAOA,UAAU,0BAAjB,SAA4CmB,IAEtB,IAArBI,EAAUG,OACT,8BACE,oBAAI1B,UAAU,6BAAd,6BAECqB,EAUH,qBAAKrB,UAAU,mBAAf,SACE,6CAVFe,EAAayC,KAAI,SAACd,GAAD,OACf,cAAC,EAAD,CACE1C,UAAU,yBACVM,YAAamC,EAEbvC,MAAOwC,GADFe,UASX,cAAC,EAAD,CAAO7C,QA/BD,SAACD,GACbA,EAAE+C,iBACFnB,EAAY,GAJZrB,EAAiB,IAMjBI,GAAY,IA2BN,qCClGVqC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,W","file":"static/js/main.ffdc9c93.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={props.className}>\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={props.carte.image}\r\n\t\t\t\t\talt=\"perso\"\r\n\t\t\t\t\tonClick={() => props.changeliste(props.carte)}\r\n\t\t\t\t\tclassName=\"w-100 img-fluid bg-image hover-zoom cursor-pointer \"\r\n\t\t\t\t/>\r\n\t\t\t\t{props.carte.nom}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\nexport default Card;\r\n","const Score = (props) => {\r\n\treturn <div className={props.className}>Score : {props.children}</div>;\r\n};\r\nexport default Score;\r\n","const Reset = (props) => {\r\n\treturn (\r\n\t\t<div className=\"text-center mt-3\">\r\n\t\t\t<button\r\n\t\t\t\tonClick={(e) => props.newgame(e)}\r\n\t\t\t\tclassName=\"btn btn-primary\">\r\n\t\t\t\t{props.children}\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Reset;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uniqid from \"uniqid\";\r\nimport Card from \"./card\";\r\nimport Score from \"./score\";\r\nimport Reset from \"./reset\";\r\n\r\nconst ListCard = (props) => {\r\n  const [listeDisplay, setlisteDisplay] = useState([]);\r\n  const [carteSelected, setcarteselected] = useState([]);\r\n  const [score, setscore] = useState(0);\r\n  const [gameover, setgameover] = useState(false);\r\n  const [listeCard, setlisteCard] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (listeCard.length === 0) {\r\n      const maliste = [];\r\n      fetch(\r\n        \"https://gateway.marvel.com:443/v1/public/characters/1009165/comics?limit=25&apikey=2f336d6ed425b8bb4bc1b4740acd4648\"\r\n      )\r\n        .then((response) => response.json())\r\n        .then((response) => response.data.results)\r\n        .then((response) => {\r\n          response.forEach((element) => {\r\n            //console.log(element);\r\n            maliste.push({\r\n              id: element[\"id\"],\r\n              nom: element[\"title\"],\r\n              image: element[\"thumbnail\"][\"path\"] + \"/portrait_uncanny.jpg\",\r\n            });\r\n          });\r\n          setlisteCard(maliste);\r\n          initliste(maliste);\r\n        });\r\n    }\r\n  }, [listeCard]);\r\n\r\n  const changeScore = (newscore) => {\r\n    setscore(newscore);\r\n  };\r\n\r\n  const hasCard = (card) => {\r\n    const index = carteSelected.findIndex((cardId) => cardId === card.id);\r\n    if (index === -1) {\r\n      const ncartes = carteSelected;\r\n      ncartes.push(card.id);\r\n      setcarteselected(ncartes);\r\n      setgameover(false);\r\n    } else {\r\n      setgameover(true);\r\n    }\r\n  };\r\n  const controlChange = (card) => {\r\n    hasCard(card);\r\n    gameover ? alert(\"Game Over\") : changeliste();\r\n  };\r\n\r\n  const changeliste = () => {\r\n    changeScore(score + 1);\r\n    console.log(carteSelected);\r\n    initliste(listeCard);\r\n  };\r\n\r\n  const initliste = (list) => {\r\n    const newliste = [];\r\n    while (newliste.length !== 8) {\r\n      const hazard = parseInt(Math.random() * 24);\r\n\r\n      const index = newliste.findIndex((card) => card.id === list[hazard].id);\r\n      if (index === -1) {\r\n        newliste.push(list[hazard]);\r\n      }\r\n    }\r\n    setlisteDisplay(newliste);\r\n  };\r\n\r\n  const resetCarteSelected = () => {\r\n    setcarteselected([]);\r\n  };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    changeScore(0);\r\n    resetCarteSelected();\r\n    setgameover(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container h-100\">\r\n        <div className=\"row justify-content-center \">\r\n          <Score className=\"col-12 text-center pt-2\">{score}</Score>\r\n\r\n          {listeCard.length === 0 ? (\r\n            <div>\r\n              <h1 className=\"text-center fw-normal my-5\">Chargement...</h1>\r\n            </div>\r\n          ) : !gameover ? (\r\n            listeDisplay.map((card) => (\r\n              <Card\r\n                className=\"col-3 text-center py-2\"\r\n                changeliste={controlChange}\r\n                key={uniqid()}\r\n                carte={card}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className=\"text-center my-5\">\r\n              <h1>Game Over</h1>\r\n            </div>\r\n          )}\r\n          <Reset newgame={reset}>Nouvelle Partie</Reset>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListCard;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as mdb from \"mdb-ui-kit\"; // lib\r\nimport { Input } from \"mdb-ui-kit\"; // module\r\n\r\nimport Listcard from \"./listcard\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Listcard />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}